{"version":3,"file":"static/js/457.a02e3b5e.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","redux/contacts/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Spinner/Spinner.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","views/ContactsView.styled.jsx","views/ContactsView.js"],"sourcesContent":["// export const getContacts = state => state.contacts.data;\n\n// export const getFilter = state => state.filters.value;\nexport const getModal = state => state.modal.status;","import styled from '@emotion/styled';\n\nexport const Li = styled.div`\n  display: flex;\n  gap: 15px;\n  align-items: baseline;\n`;\n\nexport const P = styled.p`\n  line-height: 0;\n`;\n\nexport const Button = styled.button`\n  background-color: #fff;\n  color: #000;\n  padding: 2px 5px 2px 5px;\n  height: 25px;\n  border-radius: 4px;\n  border: 1px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n// import { Spinner } from 'components/Spinner/Spinner';\n// import Notiflix from 'notiflix';\nimport { Li, P, Button } from './ContactListItem.styled';\n\nconst ContactListItem = ({ id, name, number }) => {\n  // const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  // const handleDelete = async id => {\n  //   try {\n  //     await deleteContact(id);\n  //     Notiflix.Notify.success('Contact deleted!');\n  //   } catch (error) {\n  //     Notiflix.Notify.failure(error);\n  //   }\n  // };\n\n  return (\n    <Li key={id}>\n      <P>{name}</P>\n      <P>{number}</P>\n      <Button\n        onClick={() => {\n          handleDelete(id);\n        }}\n        // disabled={isDeleting}\n      >\n        {/* {isDeleting && <Spinner size={12} />} */}\n        Delete\n      </Button>\n    </Li>\n  );\n};\nexport default ContactListItem;\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.filters.value;\n\nexport const selectAllContacts = state => state.contacts.items;","import styled from '@emotion/styled';\n\nexport const Find = styled.div`\n  display: flex;\n  gap: 5px;\n  line-height: 0;\n`;\n","import { React, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/filtersSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Find } from './Filter.styled';\n\nconst Filter = () => {\n  const filterDefault = useSelector(selectFilter);\n  const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n  const handleChange = e => {\n    const val = e.currentTarget.value;\n    setFilter(val);\n    dispatch(setStatusFilter(val));\n  };\n\n  return (\n    <Find>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter || filterDefault}\n        onChange={handleChange}\n      />\n    </Find>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const UL = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0px;\n  margin-left: 20px;\n  margin-top: 10px;\n`;\n","import { useSelector } from 'react-redux';\nimport ContactListItem from '../ContactListItem';\n\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\n\nimport Filter from '../Filter';\n\nimport { UL } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n\n  const lowerFilter = filter.toLowerCase();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(lowerFilter)\n  );\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <Filter />\n      {filteredContacts.length > 0 && (\n        <UL>\n          {filteredContacts.map(contact => (\n            <ContactListItem key={contact.id} {...contact} />\n          ))}\n        </UL>\n      )}\n    </>\n  );\n};\nexport default ContactList;\n","import styled from '@emotion/styled/macro';\nimport { keyframes } from '@emotion/react';\nimport { CgSpinner } from 'react-icons/cg';\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nconst Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 40,\n};\n\nexport default Spinner;\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vw;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalContent = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 12px;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 2px 1px, -1px, rgba(0, 0, 0, 0.2), 0px 1px 1px, 0px,\n    rgba(0, 0, 0, 0.14), 0px 1px 3px, 0px, rgba(0, 0, 0, 0.12);\n\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n`;\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setStatusModal } from 'redux/modalSlice';\n\nimport { Backdrop, ModalContent } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ children }) => {\n  const dispatch = useDispatch();\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      dispatch(setStatusModal(false));\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.code === 'Escape') {\n      dispatch(setStatusModal(false));\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <ModalContent className=\"modalContent\">{children}</ModalContent>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  width: 250px;\n  align-items: flex-end;\n  border: solid 1px black;\n  display: flex;\n  flex-direction: column;\n  gap: 0px;\n  padding: 10px;\n  line-height: 0.5;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  gap: 5px;\n  line-height: 0;\n`;\n\nexport const Button = styled.button`\n  background-color: #fff;\n  color: #000;\n  padding: 2px 5px 2px 5px;\n  height: 30px;\n  border-radius: 5px;\n  border: 1px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n","import { React, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { setStatusModal } from 'redux/modalSlice';\n// import {\n//   useCreateContactMutation,\n//   useFetchContactsQuery,\n// } from 'redux/phonebookSlice';\n\nimport { Button, Form, Label } from './ContactForm.styled';\n// import Notiflix from 'notiflix';\n// import { Spinner } from 'components/Spinner/Spinner';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  // const [createContact, { isLoading, error }] = useCreateContactMutation();\n  // const { data: contacts } = useFetchContactsQuery();\n\n  const handleName = e => {\n    setName(e.currentTarget.value);\n  };\n  const handleNumber = e => {\n    setNumber(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // const isNameExists = contacts.some(\n    //   contact => contact.name?.toLowerCase() === name.toLowerCase()\n    // );\n\n    // if (isNameExists) {\n    //   Notiflix.Notify.warning(`${name} is already in contacts`);\n    //   return;\n    // }\n\n    // createContact({ name: name, number: number });\n    // if (error) {\n    //   Notiflix.Notify.failure(error.message);\n    //   return;\n    // }\n    dispatch(addContact({ name, number }));\n    // Notiflix.Notify.success(isLoading);\n\n    setName('');\n    setNumber('');\n    dispatch(setStatusModal(false));\n  };\n\n  return (\n    <>\n      <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Label htmlFor=\"name\">\n          <p>Name:</p>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={name}\n            onChange={handleName}\n            required\n          />\n        </Label>\n        <br />\n        <Label htmlFor=\"number\">\n          <p>Number:</p>\n          <input\n            type=\"tel\"\n            id=\"number\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            value={number}\n            onChange={handleNumber}\n            required\n          />\n        </Label>\n        <br />\n        <Button\n          type=\"submit\"\n          // disabled={isLoading}\n        >\n          {/* {isLoading && <Spinner size={12} />} */}\n          Add Contact\n        </Button>\n      </Form>\n    </>\n  );\n};\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ModalItems = styled.div`\n  display: flex;\n  gap: 15px;\n  flex-direction: column;\n`;\n\nexport const ContactsHead = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\nexport const ModalBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Book = styled.div`\n  margin-top: 20px;\n  margin-left: 20px;\n`;\n\nexport const Button = styled.button`\n  font-size: 16px;\n  line-height: 26px;\n  background-color: #fff;\n  color: #000;\n  padding: 5px 15px 5px 15px;\n  height: 40px;\n  border-radius: 5px;\n  border: 2px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n\nexport const CloseButton = styled.button`\n  background-color: #fff;\n  color: #000;\n  padding: 2px 5px 2px 5px;\n  height: 25px;\n  border-radius: 4px;\n  border: 1px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setStatusModal } from 'redux/modalSlice';\nimport { getModal } from 'redux/selectors';\nimport  ContactList    from 'components/ContactList';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport Spinner from 'components/Spinner';\n\nimport Modal from '../components/Modal';\nimport  ContactForm from '../components/ContactForm';\nimport {\n  Book,\n  Button,\n  CloseButton,\n  ModalBlock,\n  ModalItems,\n  ContactsHead,\n} from './ContactsView.styled';\n\n\nconst ContactsView = () => {\n  const showModal = useSelector(getModal);\n  const dispatch = useDispatch();\n  const toggleModal = () => {\n    dispatch(setStatusModal(!showModal));\n  };\n\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\nreturn (\n  <>\n    <Book>\n      <h1>Phonebook</h1>\n      <ContactsHead>\n        <Button type=\"button\" onClick={toggleModal}>\n          Add Contact\n        </Button>\n      </ContactsHead>\n      {showModal && (\n        <Modal>\n          <ModalBlock>\n            <ModalItems>\n              <CloseButton type=\"button\" onClick={toggleModal}>\n                Close\n              </CloseButton>\n              <ContactForm />\n            </ModalItems>\n          </ModalBlock>\n        </Modal>\n      )}\n      {isLoading && (\n        <>\n          <br />\n          <Spinner />\n        </>\n      )}\n      <ContactList/>\n    </Book>\n  </>\n\n );\n};\nexport default ContactsView;\n\n"],"names":["getModal","state","modal","status","Li","styled","P","Button","id","name","number","dispatch","useDispatch","onClick","deleteContact","selectLoading","contacts","loading","selectFilter","filters","value","selectAllContacts","items","Find","filterDefault","useSelector","useState","filter","setFilter","type","onChange","e","val","currentTarget","setStatusFilter","UL","lowerFilter","toLowerCase","filteredContacts","contact","includes","length","map","spin","keyframes","Spinner","CgSpinner","defaultProps","size","Backdrop","ModalContent","modalRoot","document","querySelector","children","handleKeyDown","event","code","setStatusModal","useEffect","window","addEventListener","removeEventListener","createPortal","target","className","Form","Label","setName","setNumber","autoComplete","onSubmit","preventDefault","addContact","htmlFor","required","pattern","ModalItems","ContactsHead","ModalBlock","Book","CloseButton","showModal","toggleModal","isLoading","fetchContacts"],"sourceRoot":""}